//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/Alp/PuzzleInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PuzzleInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PuzzleInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PuzzleInput"",
    ""maps"": [
        {
            ""name"": ""PuzzleMove"",
            ""id"": ""fd0764ee-bd3d-4a66-85fd-142b141074ac"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""91a10053-0c79-4ba1-bd03-0161b48fa3b1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""ec72def4-324a-4e00-be9c-7b5a5086224e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""c98344e6-aab8-411a-9fb8-9c43043dbd12"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""fab90c35-1c08-4aca-ac8c-7c712b084e26"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""cc4bae6d-f812-43ea-97d4-4788abc545b5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b686a47a-e3b4-4758-b508-273e1844e4d9"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PuzzleMove
        m_PuzzleMove = asset.FindActionMap("PuzzleMove", throwIfNotFound: true);
        m_PuzzleMove_Move = m_PuzzleMove.FindAction("Move", throwIfNotFound: true);
        m_PuzzleMove_Exit = m_PuzzleMove.FindAction("Exit", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PuzzleMove
    private readonly InputActionMap m_PuzzleMove;
    private List<IPuzzleMoveActions> m_PuzzleMoveActionsCallbackInterfaces = new List<IPuzzleMoveActions>();
    private readonly InputAction m_PuzzleMove_Move;
    private readonly InputAction m_PuzzleMove_Exit;
    public struct PuzzleMoveActions
    {
        private @PuzzleInput m_Wrapper;
        public PuzzleMoveActions(@PuzzleInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PuzzleMove_Move;
        public InputAction @Exit => m_Wrapper.m_PuzzleMove_Exit;
        public InputActionMap Get() { return m_Wrapper.m_PuzzleMove; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PuzzleMoveActions set) { return set.Get(); }
        public void AddCallbacks(IPuzzleMoveActions instance)
        {
            if (instance == null || m_Wrapper.m_PuzzleMoveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PuzzleMoveActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Exit.started += instance.OnExit;
            @Exit.performed += instance.OnExit;
            @Exit.canceled += instance.OnExit;
        }

        private void UnregisterCallbacks(IPuzzleMoveActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Exit.started -= instance.OnExit;
            @Exit.performed -= instance.OnExit;
            @Exit.canceled -= instance.OnExit;
        }

        public void RemoveCallbacks(IPuzzleMoveActions instance)
        {
            if (m_Wrapper.m_PuzzleMoveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPuzzleMoveActions instance)
        {
            foreach (var item in m_Wrapper.m_PuzzleMoveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PuzzleMoveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PuzzleMoveActions @PuzzleMove => new PuzzleMoveActions(this);
    public interface IPuzzleMoveActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnExit(InputAction.CallbackContext context);
    }
}
